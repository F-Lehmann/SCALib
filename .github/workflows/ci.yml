name: CI

on: [push]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python: [3.6,]
    steps:
      - uses: actions/checkout@v2
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}
      - name: Install Tox
        run: pip install tox
      - name: Run tests
        # Run tox using the version of Python in `PATH`
        run: tox -e test

  build_wheels:
    name: Build wheels on ${{ matrix.os }}  - ${{ matrix.vers }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
#          - vers: aarch64
#            os: ubuntu-20.04
          - vers: auto64
            os: ubuntu-20.04
#          - vers: arm64
#            os: macos-10.15
#          - vers: auto64
#            os: macos-10.15
          - vers: auto64
            os: windows-2019

    env:
      SCCACHE_VERSION: 0.2.13
      CIBW_BEFORE_ALL_LINUX: "curl https://sh.rustup.rs -sSf | sh -s -- --default-toolchain stable -y && yum install -y boost-devel"
      CIBW_BUILD_VERBOSITY: "1" # Make some more noise so that travis doesn't stall
      CIBW_ENVIRONMENT: 'PATH="$PATH:$HOME/.cargo/bin"'
      CIBW_BUILD: "cp36-*"
      CIBW_SKIP: "*-win32 *_i686 *_ppc64le *_s390x" 
      # I don't know how to make doctring tests work with only one command
      CIBW_TEST_COMMAND: cd {project}; pytest tests && pytest --pyargs scale
      CIBW_TEST_EXTRAS: test

    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-python@v2
        name: Install Python
        with:
          python-version: "3.6"

      - uses: actions/cache@v2
        id: cache-openblas
        if: runner.os == 'Windows'
        with:
            path: ${{ env.GITHUB_WORKSPACE }}/openblas-inst
            key: openblas-0.3.14-v0

      - name: test multiline
        if: ${{ runner.os == 'Windows' && steps.cache-openblas.outputs.cache-hit != 'true' }}
        shell: cmd /C CALL {0}
        run: |
            echo a
            echo b

      - name: Enable miniconda
        if: ${{ runner.os == 'Windows' && steps.cache-openblas.outputs.cache-hit != 'true' }}
        uses: conda-incubator/setup-miniconda@v2
        with:
            miniconda-version: "latest"
            channels: conda-forge
            activate-environment: buildenv
      - name: Install openblas build dependencies (with conda)
        if: ${{ runner.os == 'Windows' && steps.cache-openblas.outputs.cache-hit != 'true' }}
        shell: cmd /C CALL {0}
        run: conda install -y cmake flang clangdev perl libflang ninja
      - name: Download OpenBLAS source
        if: ${{ runner.os == 'Windows' && steps.cache-openblas.outputs.cache-hit != 'true' }}
        shell: bash
        run: |
            cd $GITHUB_WORKSPACE
            pwd
            ls
            mkdir openblas
            ls
            cd openblas
            pwd
            ls
            curl -L -O https://github.com/xianyi/OpenBLAS/releases/download/v0.3.14/OpenBLAS-0.3.14.tar.gz
            ls
            tar xzf OpenBLAS-0.3.14.tar.gz
            ls
            cd OpenBLAS-0.3.14
            pwd
            ls
            mkdir build
            ls
      - name: Compile and install OpenBLAS (0)
        if: ${{ runner.os == 'Windows' && steps.cache-openblas.outputs.cache-hit != 'true' }}
        shell: cmd /C CALL {0}
        run: >
            conda info

      - name: Compile and install OpenBLAS (1.a)
        if: ${{ runner.os == 'Windows' && steps.cache-openblas.outputs.cache-hit != 'true' }}
        shell: cmd /C CALL {0}
        run: >
            echo a && echo b

      - name: Compile and install OpenBLAS (1.b)
        if: ${{ runner.os == 'Windows' && steps.cache-openblas.outputs.cache-hit != 'true' }}
        shell: cmd /C CALL {0}
        run: >
            echo a &&
            echo b

      - name: Compile and install OpenBLAS (1.0)
        if: ${{ runner.os == 'Windows' && steps.cache-openblas.outputs.cache-hit != 'true' }}
        shell: cmd /C CALL {0}
        run: >
            echo %GITHUB_WORKSPACE% &&
            echo openblas_build_dir &&
            echo %GITHUB_WORKSPACE%\openblas\OpenBLAS-0.3.14\build

      - name: Compile and install OpenBLAS (1.1)
        if: ${{ runner.os == 'Windows' && steps.cache-openblas.outputs.cache-hit != 'true' }}
        shell: cmd /C CALL {0}
        run: >
            cd %GITHUB_WORKSPACE% && pwd && dir

      - name: Compile and install OpenBLAS (1.1a)
        if: ${{ runner.os == 'Windows' && steps.cache-openblas.outputs.cache-hit != 'true' }}
        shell: cmd /C CALL {0}
        run: >
            cd %GITHUB_WORKSPACE%\openblas && pwd && dir


      - name: Compile and install OpenBLAS (1.2)
        if: ${{ runner.os == 'Windows' && steps.cache-openblas.outputs.cache-hit != 'true' }}
        shell: cmd /C CALL {0}
        run: >
            cd %GITHUB_WORKSPACE%\openblas\OpenBLAS-0.3.14\build

      - name: Compile and install OpenBLAS (1.2a)
        if: ${{ runner.os == 'Windows' && steps.cache-openblas.outputs.cache-hit != 'true' }}
        shell: cmd /C CALL {0}
        run: >
            cd %GITHUB_WORKSPACE%\openblas\OpenBLAS-0.3.14\build && dir

      - name: Compile and install OpenBLAS (1)
        if: ${{ runner.os == 'Windows' && steps.cache-openblas.outputs.cache-hit != 'true' }}
        shell: cmd /C CALL {0}
        run: >
            conda info &&
            cd %GITHUB_WORKSPACE%\openblas\OpenBLAS-0.3.14\build

      - name: Compile and install OpenBLAS (2)
        if: ${{ runner.os == 'Windows' && steps.cache-openblas.outputs.cache-hit != 'true' }}
        shell: cmd /C CALL {0}
        run: >
            conda info &&
            cd %GITHUB_WORKSPACE%\openblas\OpenBLAS-0.3.14\build &&
            "c:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Auxiliary/Build/vcvars64.bat"

      - name: Compile and install OpenBLAS (3)
        if: ${{ runner.os == 'Windows' && steps.cache-openblas.outputs.cache-hit != 'true' }}
        shell: cmd /C CALL {0}
        run: >
            conda info &&
            cd %GITHUB_WORKSPACE%\openblas\OpenBLAS-0.3.14\build &&
            "c:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Auxiliary/Build/vcvars64.bat" &&
            set "LIB=%CONDA_PREFIX%/Library/lib;%LIB%"

      - name: Compile and install OpenBLAS (4)
        if: ${{ runner.os == 'Windows' && steps.cache-openblas.outputs.cache-hit != 'true' }}
        shell: cmd /C CALL {0}
        run: >
            conda info &&
            cd %GITHUB_WORKSPACE%\openblas\OpenBLAS-0.3.14\build &&
            "c:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Auxiliary/Build/vcvars64.bat" &&
            set "LIB=%CONDA_PREFIX%/Library/lib;%LIB%" &&
            set "CPATH=%CONDA_PREFIX%/Library/include;%CPATH%"

      - name: Compile and install OpenBLAS
        if: ${{ runner.os == 'Windows' && steps.cache-openblas.outputs.cache-hit != 'true' }}
        shell: cmd /C CALL {0}
        run: %GITHUB_WORKSPACE%\build_openblas.bat

      - name: Set up QEMU
        if: runner.os == 'Linux'
        uses: docker/setup-qemu-action@v1
        with:
          platforms: all

      - name: wheels Linux ${{ matrix.vers }}
        if: runner.os == 'Linux'
        uses: joerick/cibuildwheel@v1.10.0
        env:
          CIBW_ARCHS_LINUX: ${{ matrix.vers }}

      - name: wheels Macos ${{ matrix.vers }}
        if: runner.os == 'Macos'
        uses: joerick/cibuildwheel@v1.10.0
        env:
          CIBW_ARCHS_MACOS: ${{ matrix.vers }}

      - name: wheels Windows ${{ matrix.vers }}
        if: runner.os == 'Windows'
        uses: joerick/cibuildwheel@v1.10.0
        env:
          CIBW_ARCHS_WINDOWS: ${{ matrix.vers }}
          SCALE_OPENBLAS_LIB: ${{ env.GITHUB_WORKSPACE}}/openblas-inst/lib/openblas.lib

      - uses: actions/upload-artifact@v2
        with:
          path: ./wheelhouse/*.whl

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Install rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal

      - uses: actions/setup-python@v2
        name: Install Python
        with:
          python-version: "3.6"

      - name: Build sdist
        run: |
            python -m pip install build
            python -m build --sdist .
      - uses: actions/upload-artifact@v2
        with:
          path: dist/*.tar.gz

  release:
    needs: [build_wheels, build_sdist]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: artifact
          path: dist
      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          body: |
            view the CHANGELOG.md for full changes
          files: |
            dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
