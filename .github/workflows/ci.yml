name: CI

on: [push]

jobs:
    test:
        runs-on: ubuntu-latest
        strategy:
            matrix:
                python: [3.6,]
        steps:
            - uses: actions/checkout@v2
            - name: Setup Python
              uses: actions/setup-python@v2
              with:
                  python-version: ${{ matrix.python }}
            - name: Install Tox
              run: pip install tox
            - name: Run tests
              # Run tox using the version of Python in `PATH`
              run: tox -e test
  
    build_openblas_windows:
        name: Build OpenBLAS on Windows
        runs-on: windows-2019
        steps:
            - uses: actions/cache@v2
              id: cache-openblas
              with:
                  path: ${{ github.workspace }}/openblas-inst
                  key: openblas-0.3.14-v0
            - name: Enable miniconda
              if: ${{ steps.cache-openblas.outputs.cache-hit != 'true' }}
              uses: conda-incubator/setup-miniconda@v2
              with:
                  miniconda-version: "latest"
                  channels: conda-forge
                  activate-environment: buildenv
            - name: Download OpenBLAS source
              if: ${{ steps.cache-openblas.outputs.cache-hit != 'true' }}
              shell: bash
              run: |
                  cd $GITHUB_WORKSPACE
                  mkdir openblas
                  cd openblas
                  curl -L -O https://github.com/xianyi/OpenBLAS/releases/download/v0.3.14/OpenBLAS-0.3.14.tar.gz
                  tar xzf OpenBLAS-0.3.14.tar.gz
                  cd OpenBLAS-0.3.14
                  mkdir build
            - name: Install openblas build dependencies (with conda)
              if: ${{ steps.cache-openblas.outputs.cache-hit != 'true' }}
              shell: cmd /C CALL {0}
              run: conda install -y cmake flang clangdev perl libflang ninja
            - name: Compile and install OpenBLAS
              if: ${{ steps.cache-openblas.outputs.cache-hit != 'true' }}
              shell: cmd /C CALL {0}
              run: |
                  cd %GITHUB_WORKSPACE%\openblas\OpenBLAS-0.3.14\build
                  call "c:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Auxiliary/Build/vcvars64.bat"
                  set "LIB=%CONDA_PREFIX%/Library/lib;%LIB%"
                  set "CPATH=%CONDA_PREFIX%/Library/include;%CPATH%"
                  cmake .. -G "Ninja" -DCMAKE_CXX_COMPILER=clang-cl -DCMAKE_C_COMPILER=clang-cl -DCMAKE_Fortran_COMPILER=flang -DBUILD_WITHOUT_LAPACK=no -DNOFORTRAN=0 -DDYNAMIC_ARCH=ON -DCMAKE_BUILD_TYPE=Release -DUSE_THREAD=ON -DNUM_THREADS=128 -DUSE_OPENMP=0
                  cmake --build . --config Release
                  cmake --install . --prefix %GITHUB_WORKSPACE%\openblas-inst -v
            - name: Upload OpenBLAS build
              uses: actions/upload-artifact@v2
              with:
                  name: openblas-windows-2019
                  path: openblas-inst

    build_wheels:
        name: Build wheels on ${{ matrix.os }}  - ${{ matrix.vers }}
        needs: [build_openblas_windows]
        runs-on: ${{ matrix.os }}
        strategy:
            fail-fast: false
            matrix:
                include:
                    - vers: auto64
                      os: ubuntu-20.04
                    - vers: auto64
                      os: windows-2019
#                   - vers: aarch64
#                     os: ubuntu-20.04
#                   - vers: arm64
#                     os: macos-10.15
#                   - vers: auto64
#                     os: macos-10.15
        env:
            SCCACHE_VERSION: 0.2.13
            CIBW_BEFORE_ALL_LINUX: "curl https://sh.rustup.rs -sSf | sh -s -- --default-toolchain stable -y && yum install -y boost-devel"
            CIBW_BUILD_VERBOSITY: "1" # Make some more noise so that travis doesn't stall
            CIBW_ENVIRONMENT: 'PATH="$PATH:$HOME/.cargo/bin"'
            CIBW_BUILD: "cp36-*"
            CIBW_SKIP: "*-win32 *_i686 *_ppc64le *_s390x" 
            # I don't know how to make doctring tests work with only one command
            CIBW_TEST_COMMAND: cd {project}; pytest tests && pytest --pyargs scale
            CIBW_TEST_EXTRAS: test
        steps:
            - uses: actions/checkout@v2
            - uses: actions/setup-python@v2
              name: Install Python
              with:
                  python-version: "3.6"

            - name: Download OpenBLAS build
              if: ${{ runner.os == 'Windows' }}
              uses: actions/download-artifact@v2
              with:
                  name: openblas-windows-2019
                  path: openblas-inst

            - name: Test download openblas bash
              if: ${{ runner.os == 'Windows' }}
              shell: bash
              run: |
                  pwd
                  ls
                  ls openblas-inst

            - name: Test download openblas
              if: ${{ runner.os == 'Windows' }}
              run: |
                  pwd
                  ls
                  ls openblas-inst

            - name: Test download openblas 2
              if: ${{ runner.os == 'Windows' }}
              shell: cmd
              run: |
                  echo %SCALE_OPENBLAS_LIB_DIR%
                  dir %SCALE_OPENBLAS_LIB_DIR%
              env:
                  SCALE_OPENBLAS_LIB_DIR: ${{ github.workspace }}/openblas-inst/lib


            - name: Set up QEMU
              if: runner.os == 'Linux'
              uses: docker/setup-qemu-action@v1
              with:
                  platforms: all

            - name: wheels Linux ${{ matrix.vers }}
              if: runner.os == 'Linux'
              uses: joerick/cibuildwheel@v1.10.0
              env:
                  CIBW_ARCHS_LINUX: ${{ matrix.vers }}

            - name: wheels Macos ${{ matrix.vers }}
              if: runner.os == 'Macos'
              uses: joerick/cibuildwheel@v1.10.0
              env:
                  CIBW_ARCHS_MACOS: ${{ matrix.vers }}

            - name: wheels Windows ${{ matrix.vers }}
              if: runner.os == 'Windows'
              uses: joerick/cibuildwheel@v1.10.0
              env:
                  CIBW_ARCHS_WINDOWS: ${{ matrix.vers }}
                  SCALE_OPENBLAS_LIB_DIR: ${{ github.workspace }}/openblas-inst/lib

            - uses: actions/upload-artifact@v2
              with:
                  path: ./wheelhouse/*.whl

    build_sdist:
        name: Build source distribution
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v2
            - name: Install rust
              uses: actions-rs/toolchain@v1
              with:
                  toolchain: stable
                  profile: minimal

            - uses: actions/setup-python@v2
              name: Install Python
              with:
                  python-version: "3.6"

            - name: Build sdist
              run: |
                  python -m pip install build
                  python -m build --sdist .
            - uses: actions/upload-artifact@v2
              with:
                  path: dist/*.tar.gz

    release:
        needs: [build_wheels, build_sdist, test]
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
        runs-on: ubuntu-latest
        steps:
            - uses: actions/download-artifact@v2
              with:
                  name: artifact
                  path: dist
            - name: Release
              uses: softprops/action-gh-release@v1
              with:
                  body: |
                      view the CHANGELOG.md for full changes
                  files: |
                      dist/*
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            - uses: pypa/gh-action-pypi-publish@release/v1
              with:
                  user: __token__
                  password: ${{ secrets.PYPI_API_TOKEN }}

