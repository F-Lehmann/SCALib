name: CI

on: [push]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python: [3.6,]
    steps:
      - uses: actions/checkout@v2
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}
      - name: Install Tox
        run: pip install tox
      - name: Run tests
        # Run tox using the version of Python in `PATH`
        run: tox -e test

  build_wheels:
    name: Build wheels on ${{ matrix.os }}  - ${{ matrix.vers }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
#          - vers: aarch64
#            os: ubuntu-20.04
          - vers: auto64
            os: ubuntu-20.04
#          - vers: arm64
#            os: macos-10.15
#          - vers: auto64
#            os: macos-10.15
          - vers: auto64
            os: windows-2019

    env:
      SCCACHE_VERSION: 0.2.13
      CIBW_BEFORE_ALL_LINUX: "curl https://sh.rustup.rs -sSf | sh -s -- --default-toolchain stable -y && yum install -y boost-devel"
      CIBW_BUILD_VERBOSITY: "1" # Make some more noise so that travis doesn't stall
      CIBW_ENVIRONMENT: 'PATH="$PATH:$HOME/.cargo/bin"'
      CIBW_BUILD: "cp36-*"
      CIBW_SKIP: "*-win32 *_i686 *_ppc64le *_s390x" 
      # I don't know how to make doctring tests work with only one command
      CIBW_TEST_COMMAND: cd {project}; pytest tests && pytest --pyargs scale
      CIBW_TEST_EXTRAS: test

    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-python@v2
        name: Install Python
        with:
          python-version: "3.6"

#     - name: Install boost on windows
#       if: runner.os == 'Windows'
#       run: choco install boost-msvc-14.2

      - uses: actions/checkout@v1
      - uses: actions/cache@v2
        with:
            path: ./vcpkg
            key: vcpkg-openblas
      - name: Install vcpkg
        run: |
            git clone https://github.com/Microsoft/vcpkg.git --depth 1
            cd vcpkg
            ./bootstrap-vcpkg.bat
      - name: Install static OpenBLAS by vcpkg
        run: |
            ./vcpkg/vcpkg.exe install openblas:x64-windows-static


      - name: Set up QEMU
        if: runner.os == 'Linux'
        uses: docker/setup-qemu-action@v1
        with:
          platforms: all


      - name: wheels Linux ${{ matrix.vers }}
        if: runner.os == 'Linux'
        uses: joerick/cibuildwheel@v1.10.0
        env:
          CIBW_ARCHS_LINUX: ${{ matrix.vers }}

      - name: wheels Macos ${{ matrix.vers }}
        if: runner.os == 'Macos'
        uses: joerick/cibuildwheel@v1.10.0
        env:
          CIBW_ARCHS_MACOS: ${{ matrix.vers }}

      - name: wheels Windows ${{ matrix.vers }}
        if: runner.os == 'Windows'
        uses: joerick/cibuildwheel@v1.10.0
        env:
          CIBW_ARCHS_WINDOWS: ${{ matrix.vers }}
          CIBW_ENVIRONMENT: 'PATH="$PATH:$HOME/.cargo/bin" VCPKG_ROOT: ${{ github.workspace }}/vcpkg'

      - uses: actions/upload-artifact@v2
        with:
          path: ./wheelhouse/*.whl

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Install rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal

      - uses: actions/setup-python@v2
        name: Install Python
        with:
          python-version: "3.6"

      - name: Build sdist
        run: |
            python -m pip install build
            python -m build --sdist .
      - uses: actions/upload-artifact@v2
        with:
          path: dist/*.tar.gz

  release:
    needs: [build_wheels, build_sdist]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: artifact
          path: dist
      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          body: |
            view the CHANGELOG.md for full changes
          files: |
            dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
